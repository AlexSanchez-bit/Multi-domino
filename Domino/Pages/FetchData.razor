@page "/fetchdata"
@inject IJSRuntime JS
<PageTitle> Domino Game</PageTitle>
<style>
body
{
}
</style>

<h1>Domino</h1>

<div class="fullscreen playermenu" id="gameinit" >
  <label> Cantidad de jugadores</label>
  <input type="number" min="1" max="6" @bind="PlayerCount">
  <div class="players_info">
  @for( int index=0;index<player_count && index<6;index++)
  {
                int loop_index=index;
  <input placeholder="player name"  @bind="names[loop_index]" >
  <select @bind="types[loop_index]">
    <option selected="true">Random</option>
    <option>Botagorda</option>
  </select>
  }
  </div>

  <label >Forma de repartir la ficha</label>
  <select @bind="repartition">
    <option>Random</option>
  </select>

  <button @onclick="InitGame" class="btn btn-success btn-outline-info">IniciarPartida</button>
</div>

<!-- Toast de Notificacion -->
<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" id="toast">
  <div class="toast-header">
    <img src="..." class="rounded mr-2" alt="...">
    <strong class="mr-auto">Domino Alert</strong>
    <small>11 mins ago</small>
    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" onclick="ToogleToast()">      
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="toast-body" id="toast_text">
    Hello, world! This is a toast message.
  </div>
</div>
<div class="player_container">
<div class="current_player_info">
<!-- mostrar los turnos-->
<h5 id="player_name" >Turno de:</h5>
<!-- mostrar los turnos -->

<!--Mostrar fichas del jugador -->
<div id="player_keys">
</div>
</div>

<!-- mostrar fichas de la mesa-->
<!--Mostrar fichas del resto de jugadores -->
<div id="players_section" >
  @foreach(var a in Players){
  <div id=@a.GetIdentifier() class="backgorund_player">
    <h5 class="bg_player_name">@a.GetIdentifier()</h5>
   @foreach(var b in a.GetKeys()){
    <div class="bg_player_key" id=@b.GetHashCode()>
      @foreach(var c in b.GetAllFaces()){
      <img class="key_img" src="Assets/@GetFaceImage(c)">
      }
      </div>    
    }
    </div>
    }
    </div>

</div>
<!-- mostrar fichas de la mesa-->
<div class="board_container">
<div class=" board fixed" id="center">
</div>
@for(int i=1;i<=board_count;i++){
<div id="board_@i" class="board fixed">  
</div>
}
</div>
@code {
//valores de inicialisacion
        public string[]names = new string[6];
        public string[]types = new string[]{"Random","Random","Random","Random","Random","Random"};
        public string repartition="Random";
        public int player_count=1;
        public string PlayerCount{get{return player_count.ToString();}set{player_count=int.Parse(value);}}
       public int board_count=0;

       //printers y auxiliares de la grafica
       public BlazorPrinter printer = new BlazorPrinter();              
        public Action<IPlayer,IEnumerable<IKey>> KeyDispenser=Dispensers.NormalDispenser;   
          public IEnumerable<IPlayer> Players;              
        public Manager manager;
        public Thread hilo_juego;
        private IFace[] playable_faces;
        private IKey centerKey=null;


        private string GetFaceImage(IFace face)
        {
          return face.GetRepresentation()+".png";
        }

        protected override void OnInitialized()
        {
        printer=new BlazorPrinter();
        printer.PrintPlayerName=ChangeName;
        printer.PrintPlayerKeys=PutPlayerKeys;
        printer.RemovePlayerKeys=Removeplayerkeys;
        printer.PlayKey=this.PlayKey;
        printer.NotifyWinner=this.NotifyWinner;        
        printer.SetBoardCount=SetBoardCount;
        Players=new IPlayer[0]; 
        }


        public void InitGame()
        {
            

        JS.InvokeVoidAsync("remove_backround_key","gameinit");
          var players_array=new (string,string)[player_count];
          for(int i=0;i<player_count;i++)
          {
            players_array[i]=(names[i],types[i]);
          }
            var data = new string[6];
            for(int i=0;i<5;i++)
            {
              data[i]=Data_Saver.game_data[i];
            }
            data[5]=repartition;


          var configs = new ConfigFile(data);
          var game_builder = new GameBuilder(configs);
          game_builder.ConnectGame (printer); 
          var players = new PlayerListBuilder(players_array,game_builder);
          Players=players.GetPlayers();
        manager = game_builder.BuildGame(players.GetPlayers(),KeyDispenser);                   
        hilo_juego=new Thread(()=>{
        manager.SimulateGame();
        });
        hilo_juego.Start();
        }
            
        public void NotifyWinner(string message)
        {
        JS.InvokeVoidAsync("activateToogle",message);
        }


        public void SetBoardCount(int count)
        {
          board_count=count;
          playable_faces=new IFace[count];
        }

        public void PlayKey(IKey key,int position)
        {
          JS.InvokeVoidAsync("remove_backround_key",key.GetHashCode()); 
           
          if(centerKey==null)
          {
           var faces = Create_Key(key,false);
            centerKey=key;        
           JS.InvokeVoidAsync("add_to_center",faces); 
           return;
          }

          var to_comparehead=playable_faces[position-1]==null?centerKey.GetFace(position%2==0?centerKey.GetAllFaces().Count()-1:0):playable_faces[position-1];
          LinkedList<string> info;
          if(key.GetFace(0).Equals(to_comparehead))
          {
            info = Create_Key(key,false);
            playable_faces[position-1]=key.GetFace(key.GetAllFaces().Count()-1);
          }
          else{
            info = Create_Key(key,true);
            playable_faces[position-1]=key.GetFace(0);
          }

          JS.InvokeVoidAsync("add_to_board",info,false,position); 
        }

        private LinkedList<string> Create_Key(IKey key,bool reverso)
        {
        var info = new LinkedList<string>();
          foreach(var a in key.GetAllFaces())
          {
          if(reverso)info.AddFirst(a.GetRepresentation());
            else
            info.AddLast(a.GetRepresentation());
          }          
          return info;
        }

        public void Removeplayerkeys()
        {
        JS.InvokeVoidAsync("remove_playerKeys");
        }
        
        public void ChangeName(string a)
        {        
        JS.InvokeVoidAsync("show_backround_player",Playername);
        JS.InvokeVoidAsync("hide_backround_player",a);
          Playername=a;
          var b = JS.InvokeVoidAsync("change_name",a);
        }

        public void PutPlayerKeys(IEnumerable<IKey> keys)
        {
          foreach(IKey a in keys)
          {
            var info=Create_Key(a,false);          
            JS.InvokeVoidAsync("Add_playerKeys",info);
          }
        }
       private string Playername="12";
       }
       
