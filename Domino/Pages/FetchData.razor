@page "/fetchdata"
@inject IJSRuntime JS
<PageTitle> Domino Game</PageTitle>
<style>
body
{
}
</style>

<h1>Domino</h1>

<!-- Toast de Notificacion -->
<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" id="toast">
  <div class="toast-header">
    <img src="..." class="rounded mr-2" alt="...">
    <strong class="mr-auto">Domino Alert</strong>
    <small>11 mins ago</small>
    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" onclick="ToogleToast()">      
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="toast-body" id="toast_text">
    Hello, world! This is a toast message.
  </div>
</div>

<!-- mostrar los turnos-->
<h5 id="player_name" >Turno de:</h5>
<!-- mostrar los turnos -->

<!--Mostrar fichas del jugador -->
<div id="player_keys">
</div>
<!-- mostrar fichas de la mesa-->
<div id="board">  
</div>
<!-- mostrar fichas de la mesa-->
<!--Mostrar fichas del resto de jugadores -->
<div id="players_section">
  @foreach(var a in Players){
  <div id=@a.GetIdentifier() class="backgorund_player">
    <h5 class="bg_player_name">@a.GetIdentifier()</h5>
   @foreach(var b in a.GetKeys()){
    <div class="bg_player_key" id=@b.GetHashCode()>
      @foreach(var c in b.GetAllFaces()){
      <img class="key_img" src="Assets/@c.GetRepresentation().png">
      }
    </div>    
    }
    }
    </div>


@code {
       public BlazorPrinter printer = new BlazorPrinter();
       public ITable GameTable = new NormalTable();
        public IPlayer[] Players = new IPlayer[]{new NormalPlayer("arturo"),new NormalPlayer("maria"),new NormalPlayer("jose"),new BFPlayer("bernard")};
        public IWinCondition WinCondition= new GeneralWinCondition();
       public IPlayerSelector PlayerSelector=new NormalPlayerSelector();
        public IKeyGenerator KeyGenerator=new NormalGenerator();         
        public Action<IPlayer,IEnumerable<IKey>> KeyDispenser=Dispensers.NormalDispenser;                 
        public Manager manager;
        public Thread hilo_juego;
        private IFace right,left;

        protected override void OnInitialized()
        {
        printer.PrintPlayerName=ChangeName;
        printer.PrintPlayerKeys=PutPlayerKeys;
        printer.RemovePlayerKeys=Removeplayerkeys;
        printer.PlayKey=this.PlayKey;
        printer.NotifyWinner=this.NotifyWinner;
        GameTable.attach(printer);
        WinCondition.attach(printer);
        PlayerSelector.attach(printer);
        manager = new Manager(GameTable,Players,WinCondition,PlayerSelector,KeyGenerator);        
        manager.InitializeGame(KeyDispenser);
        hilo_juego=new Thread(()=>{
        manager.SimulateGame();
        });
        hilo_juego.Start();
        }
            
        public void NotifyWinner(string message)
        {
        JS.InvokeVoidAsync("activateToogle",message);
        }



        public void PlayKey(IKey key,int position)
        {
        
        var front = position==1;

        if(right==null )
        {
          left=key.GetFace(0);
          right=key.GetFace(key.GetAllFaces().Count()-1);
          JS.InvokeVoidAsync("add_to_board",Create_Key(key,false),false);
          return;
        }

          if(front)
          {
            if(key.GetFace(key.GetAllFaces().Count()-1).Equals(left))
            {
              left=key.GetFace(0);
              JS.InvokeVoidAsync("add_to_board",Create_Key(key,false),true);
              return;
              }else
              {
              left=key.GetFace(key.GetAllFaces().Count()-1);
              JS.InvokeVoidAsync("add_to_board",Create_Key(key,true),true);
              return;
              }
          }
          else{

            if(key.GetFace(0).Equals(right))
            {
              right=key.GetFace(key.GetAllFaces().Count()-1);
              JS.InvokeVoidAsync("add_to_board",Create_Key(key,false),false);
              return;
              }else
              {
              right=key.GetFace(0);
              JS.InvokeVoidAsync("add_to_board",Create_Key(key,true),false);
              return;
              }

          }
        }

        private LinkedList<string> Create_Key(IKey key,bool reverso)
        {
        var info = new LinkedList<string>();
          foreach(var a in key.GetAllFaces())
          {
          if(reverso)info.AddFirst(a.GetRepresentation());
            else
            info.AddLast(a.GetRepresentation());
          }          
          return info;
        }

        public void Removeplayerkeys()
        {
        JS.InvokeVoidAsync("remove_playerKeys");
        }
        
        private void update_face(int dir,IFace face)
        {
          if(dir==1)
          {
          left=face;
          }else{
          right=face;
          }
        }

        public void ChangeName(string a)
        {        
          Playername=a;
          var b = JS.InvokeVoidAsync("change_name",a);
        }

        public void PutPlayerKeys(IEnumerable<IKey> keys)
        {
          foreach(IKey a in keys)
          {
          
          var info = new List<string>();
          foreach(var face in a.GetAllFaces())
          {
            info.Add(face.GetRepresentation());
          }
            JS.InvokeVoidAsync("Add_playerKeys",info);
          }
        }
       private string Playername="12";
       }
       }
